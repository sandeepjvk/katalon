package pages

import java.lang.String

import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import java.lang.String
import org.apache.commons.lang.StringUtils
import java.util.List
import java.text.SimpleDateFormat
import org.openqa.selenium.Keys as Keys
import com.kms.katalon.core.annotation.Keyword
import com.kms.katalon.core.checkpoint.Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.testcase.TestCase
import com.kms.katalon.core.testdata.TestData
import com.kms.katalon.core.testobject.TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import org.openqa.selenium.WebDriver
import internal.GlobalVariable
import org.openqa.selenium.WebElement
import com.kms.katalon.core.testobject.ConditionType
import com.kms.katalon.core.webui.driver.DriverFactory
import com.kms.katalon.core.util.KeywordUtil
import org.openqa.selenium.interactions.Actions
import utilities.DynamicLocators
import utilities.SafeActions
import pages.CommonActions

import org.eclipse.persistence.internal.oxm.record.json.JSONParser.value_return
import org.openqa.selenium.By

public class CheckOut  extends CommonActions {

	String tableRowLocator="//tbody[@role='rowgroup'] //tr[@role='row']"
	String itemStatusLocator="[class='hc-card-asset-status'] [ref='refTextboxElement']"
	String commentFieldLocator="//div[contains(text(),' Comment')]/../..//input"
	String ConditionDropDownLocator="//*[contains(text(),' Condition')]/../../..//*[contains(@class,'icon')]"


	/**
	 * Enter data in to From field
	 * @param fromLocation
	 * Enter data in to To field
	 * @param toLocation 
	 * @return
	 */
	@Keyword
	def setFromAndToDetails(String fromLocation,String toLocation){
		setTextFieldFromTheList(' From', fromLocation)
		setTextFieldFromTheList(" To", toLocation)
	}
	/**
	 * Select Person field Triangle Icon
	 * Select Person Name
	 * @param fromLocation
	 * Click Select Button
	 * @return
	 */
	@Keyword
	def setDeliveredByPersonAndReference(String personeName,String reference){
		setPersonAndReferenceDetails(tableRowLocator,personeName,reference)
	}

	/**
	 * Select Select Item field Triangle Icon
	 * Select Barcode 
	 * @param barcode
	 * Click Select Button
	 * @return
	 */
	@Keyword
	def setSelectItemBarcode(List<String> barcodes,int numberOfBarcodes){
		setItemBarcodeValue(tableRowLocator,barcodes,numberOfBarcodes)
	}
	/**
	 * Set Condition dropdown
	 * @param fromLocation
	 * @return
	 */
	@Keyword
	def setConditionDetails(String conditionValues){
		setConditionValue(ConditionDropDownLocator,conditionValues)
	}

	/**
	 * Enter data in to Comment field
	 * @param toLocation
	 * @return
	 */
	@Keyword
	def setCommentDetails(String commentsList){
		setCommentValue(commentFieldLocator,commentsList)
	}

	/**
	 * Validation Of Id From To Person Barcode
	 * @param fromLocation
	 * @param to_location
	 * @return
	 */
	@Keyword
	def validationOfIdFromToPersonBarcode(String from_location,String to_location){
		Thread.sleep(5000)
		autoGeneratedIdShouldBeDisplayed()
		dateShouldBeDisplayed()
		validateFromLocation(from_location)
		validateToLocation(to_location)
		validateDeliveryPerson()
		validateCheckoutItems()
	}

	/**
	 * Auto Generated Of Id
	 * @return
	 */
	@Keyword
	def autoGeneratedIdShouldBeDisplayed(){
		String ID=safeGetText(findTestObject('Object Repository/CheckOut_Page/VALIDATE_ID'),GlobalVariable.MEDIUM_WAIT)
		boolean status=ID.empty
		assertion (status.equals(false))
	}

	/**
	 * Date Should Be Displayed
	 * @return
	 */	
	@Keyword
	def dateShouldBeDisplayed(){
		String Date= safeGetValue(findTestObject('Object Repository/CheckOut_Page/VALIDATE_DATE'),GlobalVariable.MEDIUM_WAIT)
		boolean status=Date.isEmpty()
		assertion (status.equals(false))
	}

	/**
	 * Validate From Location
	 * @param from_location
	 * @return
	 */
	@Keyword
	def validateFromLocation(String from_location){
		String from_place=safeGetValue(findTestObject('Object Repository/CheckOut_Page/LOCATION_FROM'),GlobalVariable.MEDIUM_WAIT)
		assertion (from_location.equals(from_place))
	}

	/**
	 * Validate To Location
	 * @param to_location
	 * @return
	 */
	@Keyword
	def validateToLocation(String to_location){
		String to_place=safeGetValue(findTestObject('Object Repository/CheckOut_Page/LOCATION_TO'),GlobalVariable.MEDIUM_WAIT)
		assertion (to_location.equals(to_place))
	}

	/**
	 * Validate Delivery Person
	 * @return
	 */
	@Keyword
	def validateDeliveryPerson(){
		String delivery_person_name=safeGetValue(findTestObject('Object Repository/CheckOut_Page/VALIDATE_DELIVERY_PERSON_NAME'),GlobalVariable.MEDIUM_WAIT)
		boolean status=delivery_person_name.isEmpty()
		assertion( status.equals(false))
	}

	/**
	 * Validate Checkout Items
	 * @return
	 */
	@Keyword
	def validateCheckoutItems(){
		String barCode=safeGetText(findTestObject('Object Repository/CheckOut_Page/VALIDATE_BARCODE'),GlobalVariable.MEDIUM_WAIT)
		boolean status=barCode.isEmpty()
		assertion( status.equals(false))
	}

	/**
	 * validate From To Location
	 * @param from_location
	 * @param to_location
	 * @return
	 */
	@Keyword
	def validateFromToLocation(String from_location, String to_location){
		String from_to_locations = safeGetText(findTestObject('CheckOut_Page/FROM_AND_TO_LOCATION'), GlobalVariable.MEDIUM_WAIT)
		String From_To= 'to'+to_location+'from'+from_location
		From_To=From_To.replace("to", "to '")
		From_To=From_To.replace("from", "' from '")
		assertion( from_to_locations.contains(From_To))
	}

	/**
	 * Validate In ActionsTab
	 * @return
	 */
	@Keyword
	def validationInActionsTab(){
		String dateValue
		safeClickwithScroll( findTestObject('Object Repository/CheckOut_Page/ACTIONS_TAB'),"Actions Tab", GlobalVariable.MEDIUM_WAIT)
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		Date date = new Date();
		dateValue= dateFormat.format(date)
		if(dateValue.startsWith("0")){
			dateValue = dateValue.replaceFirst("0", "")
		}
		ValidateViewAndCreateTabsWithDateAndTime("Create","View",dateValue)
	}

	/**
	 * Validate View And Create Tabs With Date And Time
	 * @param CreateType
	 * @param ViewType
	 * @param Date
	 * @return
	 */
	@Keyword
	def ValidateViewAndCreateTabsWithDateAndTime(String CreateType, String ViewType ,String Date){

		TestObject testObj=new TestObject()
		String locator="//td[contains(text(),'%s')]"
		String createTypelocator=String.format(locator,CreateType)
		String viewTypelocator=String.format(locator,ViewType)
		String datelocator=String.format(locator,Date)

		testObj.addProperty("xpath",ConditionType.EQUALS,createTypelocator)
		safeElementVisible(testObj, GlobalVariable.MEDIUM_WAIT)
		testObj.addProperty("xpath",ConditionType.EQUALS,viewTypelocator)
		safeElementVisible(testObj, GlobalVariable.MEDIUM_WAIT)
		testObj.addProperty("xpath",ConditionType.EQUALS,datelocator)
		safeElementVisible(testObj, GlobalVariable.MEDIUM_WAIT)
	}

	/**
	 * Validate Error Message
	 * @param ExpectedErrorMessage
	 * @return
	 */
	@Keyword
	def validateErrorMessage(String expectedErrorMessage){
		String actualErrorMessage=safeGetText(findTestObject('Object Repository/CheckOut_Page/ERROR'), GlobalVariable.MEDIUM_WAIT)
		assertion(expectedErrorMessage.equals(actualErrorMessage))
	}


	/**
	 * Search For Barcode And ValidateResults
	 * @param barcodes
	 * @param NumberOfBarcodes
	 * @param from_location
	 * @param to_location
	 * @return
	 */
	@Keyword
	def searchForBarcodeAndValidateResults(List<String> barcodes,int NumberOfBarcodes,String from_location, String to_location){
		int i=0
		for(String barcode : barcodes){
			setTextFieldAndEnter('Select Asset',barcode)

			validateTheAppropriateAsset(barcode)
			validateFromAndToLocation(from_location, to_location)
			i=i+1
			if(i==NumberOfBarcodes){
				break
			}
		}
	}

	/**
	 * Validate The Appropriate Asset
	 * @param code
	 * @return
	 */
	@Keyword
	def validateTheAppropriateAsset(String code){
		String barCode = safeGetValue(findTestObject('CheckOut_Page/BARCODE'), GlobalVariable.MEDIUM_WAIT)
		assertion( barCode.equals(code))
	}

	/**
	 * Validate The Appropriate Asset
	 * @param from_location
	 * @param to_location
	 * @return
	 */
	@Keyword
	def validateFromAndToLocation(String from_location, String to_location){
		String from_to_locations = safeGetValue(findTestObject('CheckOut_Page/FROM_TO_LOCATION'), GlobalVariable.MEDIUM_WAIT)
		String From_To= 'to'+to_location+'from'+from_location
		From_To=From_To.replace("to", "to '")
		From_To=From_To.replace("from", "' from '")
		assertion( from_to_locations.contains(From_To))
	}

	/**
	 * Validate Navigation to Check Out
	 * @return
	 */
	@Keyword
	def validateNavigationToCheckOutPage(){
		safeElementVisible( findTestObject('Object Repository/CheckOut_Page/CHECK_OUT_TITLE'), GlobalVariable.MEDIUM_WAIT)
	}
}
